@attribute [Route(pageUrl)]

<PageMetaTags PageUrl="@pageUrl" Title="@metaTitle" Description="@metaDescription" ImageUrl="@imageUrl" />


<div class="container is-max-desktop px-6 mb-4">
    <div class="has-text-centered mb-6">
        <div class="mb-6">
            <Tag Color="TagColor.Warning" Size="TagSize.Medium">New in @version</Tag>
            <span class="is-size-6 text-muted">@releaseShortDescription</span>
        </div>
        <div style="justify-items: center;">
            <Image Src="@StringConstants.StaticAssets_Icons_Logo_png"
                   Dimension="ImageDimension.Is128x128"
                   alt="BlazorExpress Logo" />
        </div>
    </div>
    <Hero Class="has-text-centered mb-6">
        <HeroTitle class="mb-4">
            @((MarkupString)pageTitle)
        </HeroTitle>
        <HeroSubTitle Class="has-text-dark">
            @((MarkupString)pageDescription)
        </HeroSubTitle>
    </Hero>
    <div class="has-text-centered mb-4">
        <a href="https://www.nuget.org/packages/BlazorExpress.Bulma/"><img alt="Nuget" src="https://img.shields.io/nuget/v/Blazor.Bootstrap"></a>
        <span class="px-1"></span>
        <a href="https://www.nuget.org/packages/BlazorExpress.Bulma/"><img alt="Nuget" src="https://img.shields.io/nuget/dt/Blazor.Bootstrap"></a>
    </div>
    <div class="has-text-centered mb-4">
        <h2 class="is-size-2">All Components</h2>
    </div>
    <div class="has-text-centered mb-6">
        <div class="has-text-link is-size-4 has-text-left has-text-weight-semibold">
            @for (int i = 0; i < allComponentsLinks.Count;)
            {
                <div class="columns is-desktop">
                    @for (int j = 0; j < 3; j++)
                    {
                        var link = allComponentsLinks.ElementAtOrDefault(i);
                        if (link == null)
                        {
                            <div class="column is-clickable"></div>
                            continue;
                        }
                        <div class="column is-clickable">
                            <a href="@link.Href"><BootstrapIcon Name="@link.IconName" /> @link.Text</a>
                        </div>

                        i++;
                    }
                </div>
            }
        </div>
    </div>
    <div class="has-text-centered mb-4">
        <h2 class="is-size-2">Form Components</h2>
    </div>
    <div class="has-text-centered mb-6">
        <div class="has-text-link is-size-4 has-text-left has-text-weight-semibold">
            @for (int i = 0; i < formComponentsLinks.Count;)
            {
                <div class="columns is-desktop">
                    @for (int j = 0; j < 3; j++)
                    {
                        var link = formComponentsLinks.ElementAtOrDefault(i);
                        if (link == null)
                        {
                            <div class="column is-clickable"></div>
                            continue;
                        }
                        <div class="column is-clickable">
                            <a href="@link.Href"><BootstrapIcon Name="@link.IconName" /> @link.Text</a>
                        </div>

                        i++;
                    }
                </div>
            }
        </div>
    </div>
    <div class="has-text-centered mb-4">
        <h2 class="is-size-2">Icon Components</h2>
    </div>
    <div class="has-text-centered mb-6">
        <div class="has-text-link is-size-4 has-text-left has-text-weight-semibold">
            @for (int i = 0; i < iconComponentsLinks.Count;)
            {
                <div class="columns is-desktop">
                    @for (int j = 0; j < 3; j++)
                    {
                        var link = iconComponentsLinks.ElementAtOrDefault(i);
                        if (link == null)
                        {
                            <div class="column is-clickable"></div>
                            continue;
                        }
                        <div class="column is-clickable">
                            <a href="@link.Href"><BootstrapIcon Name="@link.IconName" /> @link.Text</a>
                        </div>

                        i++;
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private const string pageUrl = "/";
    private const string pageTitle = "BlazorExpress Bulma Components <br /> Fast, Free & Open Source";
    private const string pageDescription = "Get started with BlazorExpress Bulma. Build high-performance, responsive Blazor apps quickly with our free, open-source UI library. Developers, build in minutes!";
    private const string metaTitle = "BlazorExpress Bulma Components: Fast, Free & Open Source";
    private const string metaDescription = "Get started with BlazorExpress Bulma. Build high-performance, responsive Blazor apps quickly with our free, open-source UI library. Developers, build in minutes!";
    private const string imageUrl = "https://i.imgur.com/FGgEMp6.jpg"; // TODO: update

    private string version = default!;
    private string releaseShortDescription = default!;

    private HashSet<PageLink> allComponentsLinks = null!;
    private HashSet<PageLink> formComponentsLinks = null!;
    private HashSet<PageLink> iconComponentsLinks = null!;

    [Inject] public IConfiguration Configuration { get; set; } = default!;

    protected override void OnInitialized()
    {
        version = $"v{Configuration["version"]}"; // example: v0.6.1
        releaseShortDescription = Configuration["release:short_description"]!;
        allComponentsLinks = PageLinkUtil.GetDemosLinks().Where(link => link.IsActive && link.Text != "Introduction").ToHashSet();
        formComponentsLinks = PageLinkUtil.GetDemosLinks().Where(link => link.IsActive && link.Categories.Contains(PageLinkCategory.Form)).ToHashSet();
        iconComponentsLinks = PageLinkUtil.GetDemosLinks().Where(link => link.IsActive && link.Categories.Contains(PageLinkCategory.Icons)).ToHashSet();
    }
}
