@attribute [Route(pageUrl)]
@layout DemosMainLayout

<PageMetaTags PageUrl="@pageUrl" Title="@metaTitle" Description="@metaDescription" ImageUrl="@imageUrl" />

<PageHero Title="@pageTitle">
    <SubTitleTemplate>
        @((MarkupString)pageDescription)
    </SubTitleTemplate>
</PageHero>

<DocsLink Href="@DemoRouteConstants.Docs_PdfViewer_Documentation" />

<Section Class="p-0" Size="HeadingSize.H3" Name="How it works" PageUrl="@pageUrl" Link="how-it-works">
    <Block>
        The <strong>PdfViewer</strong> component enables users to display PDF documents directly within a Blazor WebAssembly application, without requiring external browser plugins or tools.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Add the <code>PdfViewer</code> component to your page.</li>
                <li>Set the <code>Url</code> parameter to the PDF file's URL or a data URI.</li>
                <li>Optionally, handle the <code>OnDocumentLoaded</code> and <code>OnPageChanged</code> events to respond to document load and page navigation.</li>
            </ol>
        </div>
        This demo illustrates the minimal configuration required to embed a PDF viewer and monitor user navigation within the document.
    </Block>
    <Demo Type="typeof(PdfViewer_Demo_01_How_it_works)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Orientation" PageUrl="@pageUrl" Link="orientation">
    <Block>
        The <strong>PdfViewer</strong> component supports different page orientations to enhance the viewing experience for various document layouts.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Use the <code>Orientation</code> parameter to specify the desired layout, such as <code>Orientation.Landscape</code> for wide documents.</li>
                <li>Combine with the <code>Url</code> parameter to load your PDF file.</li>
                <li>Optionally, handle <code>OnDocumentLoaded</code> and <code>OnPageChanged</code> events as needed.</li>
            </ol>
        </div>
        This demo demonstrates how to adjust the PDF viewer's orientation for optimal display of landscape-oriented documents.
    </Block>
    <Demo Type="typeof(PdfViewer_Demo_02_Orientation)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Base64String" PageUrl="@pageUrl" Link="base64-string">
    <Block>
        The <strong>PdfViewer</strong> component can render PDF files provided as Base64-encoded strings, making it easy to display dynamically generated or in-memory documents.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Obtain or generate a Base64-encoded string representing your PDF file.</li>
                <li>Set the <code>Url</code> parameter to a data URI in the format <code>data:application/pdf;base64,{yourBase64String}</code>.</li>
                <li>Optionally, handle <code>OnDocumentLoaded</code> and <code>OnPageChanged</code> events to track document state.</li>
            </ol>
        </div>
        This demo shows how to use the component with Base64-encoded PDF data, useful for scenarios where files are not hosted as static URLs.
    </Block>
    <Demo Type="typeof(PdfViewer_Demo_03_Base64String)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Password Protected PDFs (Fixed Password)" PageUrl="@pageUrl" Link="password-protected-pdfs-fixed-password">
    <Block>
        The <strong>PdfViewer</strong> component supports opening password-protected PDF files by supplying a fixed password via the <code>Password</code> parameter.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Add the <code>PdfViewer</code> component to your page.</li>
                <li>Set the <code>Url</code> parameter to the protected PDF file (static URL or data URI).</li>
                <li>Provide the document password using the <code>Password</code> parameter (example: <code>Password="12345"</code>).</li>
                <li>Optionally handle <code>OnDocumentLoaded</code> and <code>OnPageChanged</code> to react after the document opens or when the user navigates pages.</li>
            </ol>
        </div>
        The demo loads <code>pdf_password_protected.pdf</code> from static assets and demonstrates a fixed-password scenario: <code>Password="12345"</code>. Security note: do not hard-code production secrets into client-side WebAssembly. If the PDF password must remain secret, validate or supply it server-side or use a user prompt instead (see the "Prompt for Password" demo).
    </Block>
    <Demo Type="typeof(PdfViewer_Demo_04_Password_Protected_A)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="password Protected PDFs (Prompt for Password)" PageUrl="@pageUrl" Link="password-protected-pdfs-prompt-for-password">
    <Block>
        The <strong>PdfViewer</strong> component can also be used in scenarios where you want the user to provide the password at runtime. Instead of setting a fixed <code>Password</code>, the component will prompt for credentials when a protected document is loaded (or you can implement your own prompt and pass the value to <code>Password</code>).
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Add the <code>PdfViewer</code> component to your page without setting the <code>Password</code> parameter.</li>
                <li>Set the <code>Url</code> parameter to the protected PDF file.</li>
                <li>Optionally delay or control loading (for example, show a <code>Button</code> that creates the viewer on demand) so the prompt appears only when appropriate.</li>
                <li>Optionally implement a custom UI to collect a password and supply it to the component via the <code>Password</code> parameter if you need a tailored UX.</li>
            </ol>
        </div>
        The demo demonstrates a lazy-load approach: a button toggles <code>showPdfViewer</code> and instantiates the viewer which then prompts for the password. This is useful when you want to avoid showing the prompt until the user explicitly requests the document.
    </Block>
    <Demo Type="typeof(PdfViewer_Demo_05_Password_Protected_B_Prompt_For_Password)" Tabs="true" />
</Section>

@code {
    private const string componentName = nameof(PdfViewer);
    private const string pageUrl = DemoRouteConstants.Demos_PdfViewer_Documentation;
    private const string pageTitle = componentName;
    private const string pageDescription = $"The Blazor <code>{componentName}</code> component allows users to view PDF files directly in the browser without relying on third-party browser tools or extensions.";
    private const string metaTitle = $"Blazor {componentName} Component";
    private const string metaDescription = $"The Blazor {componentName} component allows users to view PDF files directly in the browser without relying on third-party browser tools or extensions.";
    private const string imageUrl = DemoScreenshotSrcConstants.PdfViewer;
}
