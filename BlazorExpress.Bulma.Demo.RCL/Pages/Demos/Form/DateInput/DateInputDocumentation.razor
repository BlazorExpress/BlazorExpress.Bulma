@attribute [Route(pageUrl)]
@layout DemosMainLayout

<PageMetaTags PageUrl="@pageUrl" Title="@metaTitle" Description="@metaDescription" ImageUrl="@imageUrl" />

<PageHero Title="@pageTitle">
    <SubTitleTemplate>
        @((MarkupString)pageDescription)
    </SubTitleTemplate>
</PageHero>

<DocsLink Href="@DemoRouteConstants.Docs_Form_DateInput_Documentation" />

<Section Class="p-0" Size="HeadingSize.H3" Name="How it works" PageUrl="@pageUrl" Link="how-it-works">
    <Block>
        The <strong>DateInput</strong> component provides a user-friendly way to select or enter dates using a text box or a date picker interface. It supports two-way binding and works seamlessly with <code>DateOnly?</code> and other date types.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Add the <code>DateInput</code> component to your page.</li>
                <li>Bind its <code>Value</code> property to a <code>DateOnly?</code> field using <code>@@bind-Value</code>.</li>
                <li>Read or update the bound value in your code as needed.</li>
            </ol>
        </div>
        This demo shows the basic usage of <code>DateInput</code> with two-way binding, allowing users to select a date and see the value reflected in the UI.
    </Block>
    <Demo Type="typeof(DateInput_Demo_01_How_it_works)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Enable max min" PageUrl="@pageUrl" Link="enable-max-min">
    <Block>
        The <strong>DateInput</strong> component supports restricting selectable dates using minimum and maximum values. This is useful for scenarios where only a specific date range is valid.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Set <code>EnableMaxMin="true"</code> on the <code>DateInput</code> component.</li>
                <li>Provide <code>Min</code> and <code>Max</code> values to define the allowed date range.</li>
                <li>Bind the <code>Value</code> property to a <code>DateOnly</code> field.</li>
            </ol>
        </div>
        This demo shows how to restrict date selection to a specific range using <code>DateOnly</code> values.
    </Block>
    <Demo Type="typeof(DateInput_Demo_02_Enable_Max_Min_A_DateOnly)" Tabs="true" />
    <Block>
        You can also use nullable <code>DateOnly?</code> types with min and max restrictions. This allows the field to be empty while still enforcing the allowed date range when a value is entered.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Set <code>EnableMaxMin="true"</code> on the <code>DateInput</code> component.</li>
                <li>Provide <code>Min</code> and <code>Max</code> values as <code>DateOnly?</code>.</li>
                <li>Bind the <code>Value</code> property to a <code>DateOnly?</code> field.</li>
            </ol>
        </div>
        This demo demonstrates nullable date support with min and max constraints.
    </Block>
    <Demo Type="typeof(DateInput_Demo_02_Enable_Max_Min_B_DateOnly_Nullable)" Tabs="true" />
    <Block>
        The <code>DateInput</code> component also works with <code>DateTime</code> types for min and max validation. This is useful when you need to work with both date and time information.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Set <code>EnableMaxMin="true"</code> on the <code>DateInput</code> component.</li>
                <li>Provide <code>Min</code> and <code>Max</code> values as <code>DateTime</code>.</li>
                <li>Bind the <code>Value</code> property to a <code>DateTime</code> field.</li>
            </ol>
        </div>
        This demo shows how to use <code>DateInput</code> with <code>DateTime</code> values and range validation.
    </Block>
    <Demo Type="typeof(DateInput_Demo_02_Enable_Max_Min_C_DateTime)" Tabs="true" />
    <Block>
        Nullable <code>DateTime?</code> is also supported for scenarios where the date field can be empty but still needs to respect min and max constraints.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Set <code>EnableMaxMin="true"</code> on the <code>DateInput</code> component.</li>
                <li>Provide <code>Min</code> and <code>Max</code> values as <code>DateTime?</code>.</li>
                <li>Bind the <code>Value</code> property to a <code>DateTime?</code> field.</li>
            </ol>
        </div>
        This demo demonstrates nullable <code>DateTime?</code> support with min and max validation.
    </Block>
    <Demo Type="typeof(DateInput_Demo_02_Enable_Max_Min_D_DateTime_Nullable)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Colors" PageUrl="@pageUrl" Link="colors">
    <Block>
        The <strong>DateInput</strong> component supports multiple color themes to match your application's style. You can set the <code>Color</code> property to apply different visual states such as primary, info, success, warning, or danger.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Add the <code>DateInput</code> component to your page.</li>
                <li>Set the <code>Color</code> property to one of the available <code>TextInputColor</code> values (e.g., <code>Primary</code>, <code>Success</code>).</li>
                <li>Bind the <code>Value</code> property as usual.</li>
            </ol>
        </div>
        This demo shows how to apply different color styles to the <code>DateInput</code> component.
    </Block>
    <Demo Type="typeof(DateInput_Demo_03_Colors)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Sizes" PageUrl="@pageUrl" Link="Sizes">
    <Block>
        The <strong>DateInput</strong> component can be rendered in different sizes to fit various UI requirements. Use the <code>Size</code> property to select from small, normal, medium, or large input fields.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Add the <code>DateInput</code> component to your page.</li>
                <li>Set the <code>Size</code> property to <code>DateInputSize.Small</code>, <code>Normal</code>, <code>Medium</code>, or <code>Large</code>.</li>
                <li>Bind the <code>Value</code> property as needed.</li>
            </ol>
        </div>
        This demo demonstrates the available size options for the <code>DateInput</code> component.
    </Block>
    <Demo Type="typeof(DateInput_Demo_04_Sizes)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Styles" PageUrl="@pageUrl" Link="styles">
    <Block>
        The <strong>DateInput</strong> component supports additional styling options, such as rounded corners. Use the <code>IsRounded</code> property to enable a rounded appearance.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Add the <code>DateInput</code> component to your page.</li>
                <li>Set <code>IsRounded="true"</code> to apply rounded styling.</li>
                <li>Bind the <code>Value</code> property as needed.</li>
            </ol>
        </div>
        This demo shows how to enable rounded styling for the <code>DateInput</code> component.
    </Block>
    <Demo Type="typeof(DateInput_Demo_05_Styles)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="States" PageUrl="@pageUrl" Link="states">
    <Block>
        The <strong>DateInput</strong> component can visually reflect different states such as hovered, focused, or loading. Use the <code>State</code> property to control the visual state of the input.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Add the <code>DateInput</code> component to your page.</li>
                <li>Set the <code>State</code> property to <code>TextInputState.Hovered</code>, <code>Focused</code>, or <code>Loading</code> as needed.</li>
                <li>Bind the <code>Value</code> property as usual.</li>
            </ol>
        </div>
        This demo demonstrates how to display the <code>DateInput</code> in different visual states.
    </Block>
    <Demo Type="typeof(DateInput_Demo_06_States)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Disabled" PageUrl="@pageUrl" Link="disabled">
    <Block>
        The <strong>DateInput</strong> component can be disabled to prevent user interaction. Set the <code>Disabled</code> property to <code>true</code> to make the input read-only.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Add the <code>DateInput</code> component to your page.</li>
                <li>Set <code>Disabled="true"</code> to disable the input.</li>
                <li>Bind the <code>Value</code> property as needed.</li>
            </ol>
        </div>
        This demo shows how to render a disabled <code>DateInput</code> field.
    </Block>
    <Demo Type="typeof(DateInput_Demo_07_Disabled)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Validations" PageUrl="@pageUrl" Link="validations">
    <Block>
        The <strong>DateInput</strong> component integrates with Blazor's form validation system. Use it inside an <code>EditForm</code> with data annotations to provide required field validation and display error messages.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Place the <code>DateInput</code> inside an <code>EditForm</code> component.</li>
                <li>Bind the <code>Value</code> property to a model property decorated with validation attributes (e.g., <code>[Required]</code>).</li>
                <li>Add <code>DataAnnotationsValidator</code> and <code>ValidationMessage</code> components for validation support and error display.</li>
                <li>Handle form submission and reset as needed.</li>
            </ol>
        </div>
        This demo demonstrates how to use <code>DateInput</code> with form validation and error messages.
    </Block>
    <Demo Type="typeof(DateInput_Demo_08_Validations)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Alignment" PageUrl="@pageUrl" Link="alignment">
    <Block>
        The <strong>DateInput</strong> component supports text alignment customization. Use the <code>TextAlignment</code> property to align the input text to the left, center, or right.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Add the <code>DateInput</code> component to your page.</li>
                <li>Set the <code>TextAlignment</code> property to <code>TextAlignment.Left</code>, <code>Center</code>, or <code>Right</code> as needed.</li>
                <li>Bind the <code>Value</code> property as usual.</li>
            </ol>
        </div>
        This demo shows how to control the text alignment within the <code>DateInput</code> field.
    </Block>
    <Demo Type="typeof(DateInput_Demo_09_Alignment)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Events: ValueChanged" PageUrl="@pageUrl" Link="events-value-changed">
    <Block>
        The <strong>DateInput</strong> component exposes a <code>ValueChanged</code> event that is triggered whenever the user selects or enters a new date. This allows you to react to changes and update your application state accordingly.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Add the <code>DateInput</code> component to your page.</li>
                <li>Set the <code>ValueChanged</code> parameter to a callback method that handles the new value.</li>
                <li>Optionally, use a button or other UI to programmatically change the date and observe the event behavior.</li>
            </ol>
        </div>
        This demo demonstrates how to handle the <code>ValueChanged</code> event and update the UI when the date changes.
    </Block>
    <Demo Type="typeof(DateInput_Demo_10_Events_ValueChanged)" Tabs="true" />
</Section>

@code {
    private const string componentName = nameof(DateInput);
    private const string pageUrl = DemoRouteConstants.Demos_Form_DateInput_Documentation;
    private const string pageTitle = componentName;
    private const string pageDescription = $"The <code>{componentName}</code> component is constructed using an HTML input of type 'date' which limits user input based on pre-defined parameters. This component enables users to input a date using a text box with validation or a special date picker interface";
    private const string metaTitle = $"Blazor {componentName} Component";
    private const string metaDescription = $"The {componentName} component is constructed using an HTML input of type 'date' which limits user input based on pre-defined parameters. This component enables users to input a date using a text box with validation or a special date picker interface";
    private const string imageUrl = DemoScreenshotSrcConstants.DateInput;
}
