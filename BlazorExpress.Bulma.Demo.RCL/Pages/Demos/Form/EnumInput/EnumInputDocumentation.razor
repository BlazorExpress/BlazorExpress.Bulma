@attribute [Route(pageUrl)]
@layout DemosMainLayout

<PageMetaTags PageUrl="@pageUrl" Title="@metaTitle" Description="@metaDescription" ImageUrl="@imageUrl" />

<PageHero Title="@pageTitle">
    <SubTitleTemplate>
        @((MarkupString)pageDescription)
    </SubTitleTemplate>
</PageHero>

<DocsLink Href="@DemoRouteConstants.Docs_Form_EnumInput_Documentation" />

<Section Class="p-0" Size="HeadingSize.H3" Name="How it works" PageUrl="@pageUrl" Link="how-it-works">
    <Block>
        The <strong>EnumInput</strong> component displays enum values in a dropdown, allowing users to select from a predefined set of options.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Define an <code>enum</code> representing your options.</li>
                <li>Add the <code>EnumInput</code> component to your page, specifying the <code>TEnum</code> type parameter.</li>
                <li>Bind the selected value using <code>@@bind-Value</code> or <code>@@bind-Text</code> as needed.</li>
                <li>Use the selected value or text in your logic as shown in the demo.</li>
            </ol>
        </div>
        This demo shows how to bind both the enum value and text, and how to display the selected result.
    </Block>
    <Demo Type="typeof(EnumInput_Demo_01_How_it_works)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Colors" PageUrl="@pageUrl" Link="colors">
    <Block>
        The <strong>EnumInput</strong> component supports multiple color themes to match your application's style.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Set the <code>Color</code> parameter to one of the available <code>EnumInputColor</code> values (e.g., <code>Primary</code>, <code>Success</code>, <code>Danger</code>).</li>
                <li>Bind the selected value as usual.</li>
            </ol>
        </div>
        This demo demonstrates how to apply different color styles to the EnumInput dropdown.
    </Block>
    <Demo Type="typeof(EnumInput_Demo_02_Colors)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Sizes" PageUrl="@pageUrl" Link="Sizes">
    <Block>
        The <strong>EnumInput</strong> component can be rendered in various sizes to fit different UI requirements.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Set the <code>Size</code> parameter to one of the <code>EnumInputSize</code> values (<code>Small</code>, <code>Normal</code>, <code>Medium</code>, <code>Large</code>).</li>
                <li>Bind the selected value as needed.</li>
            </ol>
        </div>
        This demo shows how to display EnumInput in different sizes for flexible layout integration.
    </Block>
    <Demo Type="typeof(EnumInput_Demo_03_Sizes)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Styles" PageUrl="@pageUrl" Link="styles">
    <Block>
        The <strong>EnumInput</strong> component supports additional style options, such as rounded corners.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Set the <code>IsRounded</code> parameter to <code>true</code> to enable rounded styling.</li>
                <li>Bind the selected value as usual.</li>
            </ol>
        </div>
        This demo illustrates how to apply a rounded style to the EnumInput dropdown.
    </Block>
    <Demo Type="typeof(EnumInput_Demo_04_Styles)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="States" PageUrl="@pageUrl" Link="states">
    <Block>
        The <strong>EnumInput</strong> component can visually reflect different UI states, such as hovered, focused, or loading.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Set the <code>State</code> parameter to <code>EnumInputState.Hovered</code>, <code>Focused</code>, or <code>Loading</code> as needed.</li>
                <li>Bind the selected value for each state to observe the visual effect.</li>
            </ol>
        </div>
        This demo shows how to display EnumInput in various UI states for enhanced user feedback.
    </Block>
    <Demo Type="typeof(EnumInput_Demo_05_States)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Disabled" PageUrl="@pageUrl" Link="disabled">
    <Block>
        The <strong>EnumInput</strong> component can be disabled to prevent user interaction.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Set the <code>Disabled</code> parameter to <code>true</code> to make the dropdown non-interactive.</li>
                <li>Bind the value as usual; the user will not be able to change it.</li>
            </ol>
        </div>
        This demo demonstrates how to render EnumInput in a disabled state.
    </Block>
    <Demo Type="typeof(EnumInput_Demo_06_Disabled)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Events" PageUrl="@pageUrl" Link="events">
    <Block>
        The <strong>EnumInput</strong> component supports event callbacks for value and text changes, enabling custom logic when the selection changes.
        <br /><br />
        <strong>How to use (ValueChanged):</strong>
        <div class="content mb-2">
            <ol>
                <li>Set the <code>Value</code> parameter and handle the <code>ValueChanged</code> event to respond to selection changes.</li>
                <li>Update your logic based on the new value in the event handler.</li>
            </ol>
        </div>
        This demo shows how to handle value changes using the ValueChanged event.
    </Block>
    <Demo Type="typeof(EnumInput_Demo_07_Events_A_ValueChanged)" Tabs="true" />
    <Block>
        <strong>How to use (TextChanged):</strong>
        <div class="content mb-2">
            <ol>
                <li>Set the <code>Text</code> parameter and handle the <code>TextChanged</code> event to respond to text changes.</li>
                <li>Update your logic based on the new text in the event handler.</li>
            </ol>
        </div>
        This demo shows how to handle text changes using the TextChanged event.
    </Block>
    <Demo Type="typeof(EnumInput_Demo_07_Events_B_TextChanged)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Mehods" PageUrl="@pageUrl" Link="methods">
    <Block>
        The <strong>EnumInput</strong> component can be enabled or disabled dynamically at runtime.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Bind the <code>Disabled</code> parameter to a boolean property in your component.</li>
                <li>Update the property in your code (e.g., via button click) to enable or disable the EnumInput as needed.</li>
            </ol>
        </div>
        This demo demonstrates how to programmatically enable or disable the EnumInput component.
    </Block>
    <Demo Type="typeof(EnumInput_Demo_08_Methods_Enable_Disable)" Tabs="true" />
</Section>

@code {
    private const string componentName = nameof(EnumInput);
    private const string pageUrl = DemoRouteConstants.Demos_Form_EnumInput_Documentation;
    private const string pageTitle = componentName;
    private const string pageDescription = $"The <code>{componentName}</code> component is used to show enum values in a dropdown list. It is a simple and effective way to allow users to select from a predefined set of options.";
    private const string metaTitle = $"Blazor {componentName} Component";
    private const string metaDescription = $"The {componentName} component is used to show enum values in a dropdown list. It is a simple and effective way to allow users to select from a predefined set of options.";
    private const string imageUrl = DemoScreenshotSrcConstants.EnumInput;
}
