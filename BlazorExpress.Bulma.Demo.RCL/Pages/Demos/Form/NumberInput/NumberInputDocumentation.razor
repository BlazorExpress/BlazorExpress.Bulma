@attribute [Route(pageUrl)]
@layout DemosMainLayout

<PageMetaTags PageUrl="@pageUrl" Title="@metaTitle" Description="@metaDescription" ImageUrl="@imageUrl" />

<PageHero Title="@pageTitle">
    <SubTitleTemplate>
        @((MarkupString)pageDescription)
    </SubTitleTemplate>
</PageHero>

<DocsLink Href="@DemoRouteConstants.Docs_Form_NumberInput_Documentation" />

<Section Class="p-0" Size="HeadingSize.H3" Name="How it works" PageUrl="@pageUrl" Link="how-it-works">
    <Block>
        TODO: Add description here.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_01_How_it_works)" Tabs="true" />
</Section>

@* <Section Class="p-0" Size="HeadingSize.H3" Name="Bind event" PageUrl="@pageUrl" Link="bind-event">
    <Block>
        The <strong>NumberInput</strong> component allows you to control when the bound value updates by specifying the <code>BindEvent</code> parameter.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Use <code>@@bind-Value</code> to bind the input value to a variable.</li>
                <li>Set <code>BindEvent="BindEvent.OnInput"</code> to update the value on every keystroke, instead of the default <code>onchange</code> event.</li>
                <li>Use the bound variable in your UI or logic as needed.</li>
            </ol>
        </div>
        This demo demonstrates how to update the bound value in real-time as the user types.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_02_BindEvent)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Colors" PageUrl="@pageUrl" Link="colors">
    <Block>
        The <strong>NumberInput</strong> component supports various color themes to match your application's style.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Add the <code>NumberInput</code> component to your page.</li>
                <li>Set the <code>Color</code> property to one of the available options (e.g., <code>Primary</code>, <code>Info</code>, <code>Success</code>, <code>Warning</code>, <code>Danger</code>, <code>Link</code>).</li>
                <li>Bind the <code>Value</code> as needed.</li>
            </ol>
        </div>
        This demo shows how to apply different color styles to the input field.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_03_Colors)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Sizes" PageUrl="@pageUrl" Link="Sizes">
    <Block>
        The <strong>NumberInput</strong> component can be rendered in multiple sizes to fit different UI requirements.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Add the <code>NumberInput</code> component to your page.</li>
                <li>Set the <code>Size</code> property to <code>Small</code>, <code>Normal</code>, <code>Medium</code>, or <code>Large</code> as needed.</li>
                <li>Bind the <code>Value</code> property for user input.</li>
            </ol>
        </div>
        This demo illustrates the available size options for the input field.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_04_Sizes)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Styles" PageUrl="@pageUrl" Link="styles">
    <Block>
        The <strong>NumberInput</strong> component supports additional style options, such as rounded corners, to enhance the visual appearance.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Add the <code>TextInput</code> component to your page.</li>
                <li>Set <code>IsRounded="true"</code> to enable rounded corners.</li>
                <li>Bind the <code>Value</code> property as usual.</li>
            </ol>
        </div>
        This demo shows how to apply a rounded style to the input field.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_05_Styles)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="States" PageUrl="@pageUrl" Link="states">
    <Block>
        The <strong>NumberInput</strong> component can visually represent different states, such as hovered, focused, or loading, to provide user feedback.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Add the <code>TextInput</code> component to your page.</li>
                <li>Set the <code>State</code> property to <code>Hovered</code>, <code>Focused</code>, or <code>Loading</code> to display the corresponding visual state.</li>
                <li>Bind the <code>Value</code> property as needed.</li>
            </ol>
        </div>
        This demo demonstrates how to display different visual states for the input field.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_06_States)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Disabled" PageUrl="@pageUrl" Link="disabled">
    <Block>
        The <strong>NumberInput</strong> component can be disabled to prevent user interaction, making it read-only.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Add the <code>NumberInput</code> component to your page.</li>
                <li>Set <code>Disabled="true"</code> to disable the input field.</li>
                <li>Optionally, provide a placeholder or value to display in the disabled field.</li>
            </ol>
        </div>
        This demo shows how to render a disabled input field.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_07_Disabled)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Validations" PageUrl="@pageUrl" Link="validations">
    <Block>
        The <strong>NumberInput</strong> component integrates with Blazor's form validation system, supporting data annotations and real-time feedback.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Wrap your <code>NumberInput</code> components in an <code>EditForm</code> and provide a model with validation attributes.</li>
                <li>Bind each <code>NumberInput</code> to a property on your model using <code>@@bind-Value</code>.</li>
                <li>Use <code>ValidationMessage</code> to display validation errors for each field.</li>
                <li>Set <code>BindEvent="BindEvent.OnInput"</code> for real-time validation as the user types.</li>
            </ol>
        </div>
        This demo demonstrates how to use <code>TextInput</code> with form validation and display error messages.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_08_Validations)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Alignment" PageUrl="@pageUrl" Link="alignment">
    <Block>
        The <strong>NumberInput</strong> component allows you to control the text alignment within the input field.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Add the <code>NumberInput</code> component to your page.</li>
                <li>Set the <code>TextAlignment</code> property to <code>Left</code>, <code>Center</code>, or <code>Right</code> to align the text as desired.</li>
                <li>Bind the <code>Value</code> property for user input.</li>
            </ol>
        </div>
        This demo shows how to adjust the text alignment inside the input field.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_09_Alignment)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Events: ValueChanged" PageUrl="@pageUrl" Link="events-value-changed">
    <Block>
        The <strong>NumberInput</strong> component exposes a <code>ValueChanged</code> event, allowing you to execute custom logic whenever the input value changes.
        <br /><br />
        <strong>How to use (onchange):</strong>
        <div class="content mb-2">
            <ol>
                <li>Add the <code>NumberInput</code> component and bind its <code>Value</code> property.</li>
                <li>Set the <code>ValueChanged</code> callback to handle value changes.</li>
                <li>By default, the event fires on <code>onchange</code> (when the input loses focus or the user presses Enter).</li>
            </ol>
        </div>
        This demo shows how to handle value changes using the default event.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_10_Events_A_OnChange)" Tabs="true" />
    <Block>
        <strong>How to use (oninput):</strong>
        <div class="content mb-2">
            <ol>
                <li>Set the <code>BindEvent</code> property to <code>BindEvent.OnInput</code> to trigger <code>ValueChanged</code> on every keystroke.</li>
                <li>Bind the <code>Value</code> property and provide a <code>ValueChanged</code> callback as before.</li>
                <li>Use this approach for real-time processing or validation as the user types.</li>
            </ol>
        </div>
        This demo demonstrates handling value changes on every input event.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_10_Events_B_OnInput)" Tabs="true" />
</Section> *@

@code {
    private const string componentName = nameof(NumberInput);
    private const string pageUrl = DemoRouteConstants.Demos_Form_NumberInput_Documentation;
    private const string pageTitle = componentName;
    private const string pageDescription = $"The <code>{componentName}</code> component is a simple spacer tool. It allows sibling HTML elements to have a consistent margin between them.";
    private const string metaTitle = $"Blazor {componentName} Component";
    private const string metaDescription = $"The {componentName} component is a simple spacer tool. It allows sibling HTML elements to have a consistent margin between them.";
    private const string imageUrl = DemoScreenshotSrcConstants.NumberInput;
}
