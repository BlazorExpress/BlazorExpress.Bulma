@attribute [Route(pageUrl)]
@layout DemosMainLayout

<PageMetaTags PageUrl="@pageUrl" Title="@metaTitle" Description="@metaDescription" ImageUrl="@imageUrl" />

<PageHero Title="@pageTitle">
    <SubTitleTemplate>
        @((MarkupString)pageDescription)
    </SubTitleTemplate>
</PageHero>

<DocsLink Href="@DemoRouteConstants.Docs_Form_NumberInput_Documentation" />

<Section Class="p-0" Size="HeadingSize.H3" Name="How it works" PageUrl="@pageUrl" Link="how-it-works">
    <Block>
        The <strong>NumberInput</strong> component renders an HTML number field and binds its value to a strongly typed property, keeping the UI and model in sync.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Declare a backing field of a numeric type in <code>@@code</code>. In this demo: <code>int? enteredValue = null;</code> (nullable allows clearing the input).</li>
                <li>Add the <code>NumberInput</code> component and set the generic <code>TValue</code> to the same type, e.g., <code>TValue="int?"</code>.</li>
                <li>Bind the value using <code>@@bind-Value</code>, e.g., <code>@@bind-Value="enteredValue"</code>, to enable two-way binding.</li>
                <li>Optionally render the value to verify updates, e.g., <code>Entered value: @@enteredValue</code>.</li>
            </ol>
        </div>
        This demo shows the minimal setup: choose a numeric type via <code>TValue</code> and use <code>@@bind-Value</code> for instant model synchronization.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_01_How_it_works)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Generic type" PageUrl="@pageUrl" Link="generic-type">
    <Block>
        The <strong>NumberInput</strong> component is generic. Set <code>TValue</code> to the numeric type you need so parsing, formatting, and validation match your model. The demo shows <code>int</code>, <code>int?</code>, <code>float</code>, <code>float?</code>, <code>double</code>, <code>double?</code>, <code>decimal</code>, and <code>decimal?</code>.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Choose the numeric type for your model. Use a nullable type (e.g., <code>int?</code>) if you want the input to be clearable.</li>
                <li>Declare a backing field in <code>@@code</code>, e.g., <code>private decimal? amount;</code></li>
                <li>Add <code>NumberInput</code> and set <code>TValue</code> to the same type, e.g., <code>TValue="decimal?"</code>.</li>
                <li>Bind the value with <code>@@bind-Value</code>, e.g., <code>@@bind-Value="amount"</code>, to keep the UI and model synchronized.</li>
                <li>Optionally render the current value, handling nullables, e.g., <code>@@(amount.HasValue ? amount.Value.ToString() : "null")</code>.</li>
            </ol>
        </div>
        This demo highlights type flexibility: the same component works with multiple numeric types by switching the generic <code>TValue</code>.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_02_GenericType)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Placeholder" PageUrl="@pageUrl" Link="placeholder">
    <Block>
        Use the <strong>Placeholder</strong> parameter to show hint text in the number field until a value is entered. This is most effective with nullable numeric types so the input can be empty and display the hint.
        <br /><br />
        <strong>How to use:</strong>
        <div class="content mb-2">
            <ol>
                <li>Select a nullable numeric type if you want the field to be clearable (e.g., <code>int?</code>).</li>
                <li>Declare a backing field in <code>@@code</code>, e.g., <code>private int? enteredValue = null;</code></li>
                <li>Add <code>NumberInput</code> with matching <code>TValue</code>, bind the value, and set <code>Placeholder</code>, e.g., <code>&lt;NumberInput TValue="int?" @@bind-Value="enteredValue" Placeholder="Enter a value" /&gt;</code></li>
                <li>Optionally display the current value to verify updates, e.g., <code>Entered value: @@enteredValue</code>.</li>
            </ol>
        </div>
        The placeholder appears when the value is <code>null</code>/empty and hides as soon as a number is entered; it reappears when the input is cleared. With non-nullable types (e.g., <code>int</code>), a default value like <code>0</code> prevents the placeholder from showing.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_03_Placeholder)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Colors" PageUrl="@pageUrl" Link="colors">
    <Block>
        TODO: Add description here.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_04_Colors)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Sizes" PageUrl="@pageUrl" Link="sizes">
    <Block>
        TODO: Add description here.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_05_Sizes)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Styles" PageUrl="@pageUrl" Link="styles">
    <Block>
        TODO: Add description here.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_06_Styles)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="States" PageUrl="@pageUrl" Link="states">
    <Block>
        TODO: Add description here.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_07_States)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Disabled" PageUrl="@pageUrl" Link="disabled">
    <Block>
        TODO: Add description here.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_08_Disabled)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Alignment" PageUrl="@pageUrl" Link="alignment">
    <Block>
        TODO: Add description here.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_09_Alignment)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Enable Min Max" PageUrl="@pageUrl" Link="enable-min-max">
    <Block>
        TODO: Add description here.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_10_Enable_Min_Max)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Step" PageUrl="@pageUrl" Link="step">
    <Block>
        TODO: Add description here.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_11_Step)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Validations" PageUrl="@pageUrl" Link="validations">
    <Block>
        TODO: Add description here.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_98_Validations)" Tabs="true" />
</Section>

<Section Class="p-0" Size="HeadingSize.H3" Name="Value Changed" PageUrl="@pageUrl" Link="value-changed">
    <Block>
        TODO: Add description here.
    </Block>
    <Demo Type="typeof(NumberInput_Demo_99_Events_ValueChanged)" Tabs="true" />
</Section>

@code {
    private const string componentName = nameof(NumberInput<object>);
    private const string pageUrl = DemoRouteConstants.Demos_Form_NumberInput_Documentation;
    private const string pageTitle = componentName;
    private const string pageDescription = $"The <code>{componentName}</code> component is built around an HTML input of type number that restricts user input based on the set parameters.";
    private const string metaTitle = $"Blazor {componentName} Component";
    private const string metaDescription = $"The {componentName} component is built around an HTML input of type number that restricts user input based on the set parameters.";
    private const string imageUrl = DemoScreenshotSrcConstants.NumberInput;
}
