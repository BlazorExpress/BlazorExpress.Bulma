@namespace BlazorExpress.Bulma
@inherits BulmaComponentBase
@typeparam TItem

<CascadingValue Value="@(this)" IsFixed="true">
    @ChildContent
</CascadingValue>

@if (columns.Any())
{
    <div class="@GridContainerClassNames" style="@GridContainerStyleNames">
        <!-- table -->
        <table @ref="@Element" id="@Id" class="@ClassNames" style="@StyleNames" @attributes="@AdditionalAttributes">
            <thead class="@GridTheadClassNames" style="@GridTheadStyleNames">
                <tr class="@GridTheadRowClassNames" style="@GridTheadRowStyleNames">
                    @foreach (var column in columns)
                    {
                        <th class="@column.ThClassNames"
                            style="@column.ThStyleNames"
                            role="@(AllowSorting ? "button" : null)"
                            @onclick="@(async (e) => await OnSortClickAsync(e, column))">

                            @if (column.HeaderTemplate is not null)
                            {
                                @column.HeaderTemplate
                            }
                            else
                            {
                                <span class="mr-2">@column.HeaderText</span>
                                @if (AllowSorting)
                                {
                                    <span><i class="@column.SortIconName"></i></span>
                                }
                            }
                        </th>
                    }
                </tr>
            </thead>
            <tbody class="@GridTbodyClassNames" style="@GridTbodyStyleNames">
                @{
                    var columnCount = columns.Count;
                }
                @if (isLoading)
                {
                    @if (loadingTemplate is not null)
                    {
                        <tr>
                            @loadingTemplate.Template
                        </tr>
                    }
                    else
                    {
                        // show skeletons
                        var skeletonsRowCount = AllowPaging ? PageSize : 10;
                        @for (var i = 0; i < skeletonsRowCount; i++)
                        {
                            <tr>
                                @for (var j = 0; j < columnCount; j++)
                                {
                                    <td>
                                        <div class="@BulmaCssClass.SkeletonBlock"></div>
                                    </td>
                                }
                            </tr>
                        }
                    }
                }
                else if (items?.Any() ?? false)
                {
                    @foreach (var item in items)
                    {
                        <tr>
                            @foreach (var column in columns)
                            {
                                <td id="@column.Id" class="@column.GridColumnCssClassNames" style="@column.GridColumnCssStyleNames" @attributes="@column.AdditionalAttributes">

                                    @if (column.CellTemplate is not null)
                                    {
                                        @column.CellTemplate(item)
                                    }
                                    else
                                    {
                                        @column.ChildContent!(item)
                                    }
                                </td>
                            }
                        </tr>
                    }
                }
                else
                {
                    // show empty
                    <tr>
                        <td colspan="@columnCount">
                            @if (emptyDataTemplate is not null)
                            {
                                @emptyDataTemplate.Template
                            }
                            else
                            {
                                <div class="@BulmaCssClass.HasTextCentered @BulmaCssClass.HasTextDark py-6">
                                    <div>@EmptyDataText</div>
                                </div>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <!-- pagination -->
        @if (AllowPaging && (!AutoHidePaging || (AutoHidePaging && totalCount > 0)))
        {
            <div class="level is-mobile">
                <div class="level-item has-text-left" style="flex-grow: inherit !important;">
                    <Pagination ActivePageNumber="@gridCurrentState.PageNumber"
                                Alignment="PaginationAlignment.Center"
                                Size="PaginationSize.Small"
                                TotalPages="@TotalPages"
                                PageChanged="OnPageChangedAsync" />
                </div>
                @if (PageSizeSelectorVisible && (PageSizeSelectorItems?.Any() ?? false))
                {
                    <div class="level-item" style="flex-grow: inherit !important;">
                        <div class="select is-small">
                            <InputSelect TValue="int" Value="@gridCurrentState.PageSize" ValueExpression="() => gridCurrentState.PageSize" ValueChanged="async (value) => await OnPageSizeChangedAsync(value)">
                                @foreach (var i in PageSizeSelectorItems)
                                {
                                    <option value="@i">@i</option>
                                }
                            </InputSelect>
                        </div>
                        <span class="ml-1">@ItemsPerPageText</span>
                    </div>
                }
                <div class="level-item has-text-right" style="flex-grow: inherit !important;">@PaginationItemsText</div>
            </div>
        }
    </div>
}